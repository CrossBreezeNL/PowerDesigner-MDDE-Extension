<o:ExtendedAttributeTargetItem Id="4BEE4FAB-A303-4B12-ACC8-B54CCCED485B">
<a:ObjectID>4BEE4FAB-A303-4B12-ACC8-B54CCCED485B</a:ObjectID>
<a:Name>mdde_SqlExpression</a:Name>
<a:CreationDate>1716367064</a:CreationDate>
<a:Creator>HarmenWessels</a:Creator>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:ExtendedAttributeTargetItem.DataType>12</a:ExtendedAttributeTargetItem.DataType>
<a:Computed>1</a:Computed>
<a:ComputedAccessType>RO</a:ComputedAccessType>
<a:GetMethodScript>Function %Get%(obj)
   WriteDebug(&quot;mdde_SqlExpression Get method executed&quot;)
   &#39; Get the expression business rule object.
   Dim objExpressionBusinessRule : Set objExpressionBusinessRule = GetRealObject(obj.GetExtendedAttribute(&quot;mdde_JoinedObject&quot;))
   
   &#39; Get the SQL Expression from the business rule.
   Dim strSqlExpression : strSqlExpression = objExpressionBusinessRule.GetExtendedAttribute(&quot;mdde_SqlExpression&quot;)
   
   &#39; Create a new RegExp object.
   Dim oRegExp : Set oRegExp = New RegExp
   &#39; Replace all occurances.
   oRegExp.Global = True
   
   &#39; Loop over the join conditions and replace the parameters in the SQL Expression with the mapped parent attribute from the join condition.
   Dim colJoinConditions : Set colJoinConditions = obj.GetExtendedCollection(&quot;mdde_JoinConditions&quot;)
   Dim objJoinCondition
   For Each objJoinCondition In colJoinConditions
      &#39; Get a reference to the child attribute of the join condition (which is the input attribute / parameter).
      Dim objChildAttribute : Set objChildAttribute = objJoinCondition.GetExtendedAttribute(&quot;mdde_ChildAttribute&quot;)
      &#39; Get the fully qualified parent attribute, so alias + attribute.
      Dim strFQParentAttribute : strFQParentAttribute = objJoinCondition.GetExtendedAttribute(&quot;mdde_ParentAttributeSelector&quot;)
      &#39; Replace the parameter in the SQL Expression with the fully qualified parent attribute (or literal).
      &#39; NOTE: the \b at the end make sure it&#39;s only replacing whole words (so if two parameters have overlapping names, like @A and @AA, it still works correctly).
      oRegExp.Pattern = &quot;@&quot; &amp; objChildAttribute.Code &amp; &quot;\b&quot;
      &#39;WriteDebug(&quot;Replacing &#39;&quot; &amp; oRegExp.Pattern &amp; &quot;&#39; with &#39;&quot; &amp; strFQParentAttribute &amp; &quot;&#39;&quot;)
      strSqlExpression = oRegExp.Replace(strSqlExpression, strFQParentAttribute)
   Next

   %Get% = strSqlExpression
End Function</a:GetMethodScript>
<a:Label>Business Rule Source Object SQL Expression</a:Label>
</o:ExtendedAttributeTargetItem>