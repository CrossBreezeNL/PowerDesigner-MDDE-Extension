<o:CustomCheckTargetItem Id="EFA340AF-B273-4EF0-B06B-BAA909E4FA74">
<a:ObjectID>EFA340AF-B273-4EF0-B06B-BAA909E4FA74</a:ObjectID>
<a:Name>mdde_Check_OrderOfSourceObjects</a:Name>
<a:CreationDate>1698132582</a:CreationDate>
<a:Creator>WesselsH1</a:Creator>
<a:Comment>Check whether the order of the source objects is valid (looking at dependencies). If source objects are references in a join condition, the parent side must be listed before the child side.</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:HelpMessage>This check ensures that source objects are listed in the right order. Meaning when join conditions are specified on source objects, the referenced source objects are always listed before the current one.

The automatic correction will try to sort the source objects in the right order, by looping through them and moving source object to the position where their join condition is only referencing parent objects which are listed higher.</a:HelpMessage>
<a:OutputMessage>The following mappings have source objects which are not in the right order:</a:OutputMessage>
<a:CheckScript>Function %Check%(obj)
   %Check% = CheckSourceObjects(obj, False)
End Function

&#39; Function to check the order of source objects (and optionally fix it)
Function CheckSourceObjects(objMapping, boolAutoFix)
   &#39; Initialize the check result with True.
   CheckSourceObjects = True
   
   &#39; We will loop through the source objects in the order of the list in the mapping.
   &#39; While looping we store the available source objects in the current context in the array below so we can check whether source objects are (already) available.
   Dim colAvailableSourceObjects : Set colAvailableSourceObjects = CreateObject(&quot;System.Collections.ArrayList&quot;)

   &#39; Retrieve the source objects from the mapping.
   Dim colSourceObjects : Set colSourceObjects = objMapping.GetExtendedCollection(&quot;mdde_SourceObjects&quot;)
   
   &#39; If the mapping has no source objects, stop here.
   If colSourceObjects.Count = 0 Then
      Exit Function
   End If

   &#39; Check whether the from is the first source join.
   If UCase(colSourceObjects.Item(0).GetExtendedAttributeText(&quot;mdde_JoinType&quot;)) &lt;&gt; &quot;FROM&quot; Then
      WriteError(&quot;Mapping &#39;&quot; &amp; objMapping.DisplayName &amp; &quot;&#39;: The first source object in the mapping doesn&#39;t have join type &#39;FROM&#39;!&quot;)
      CheckSourceObjects = False
      Exit Function
   End If
   
   &#39; When we reach this point, the FROM is the first item in the list of source objects.
   &#39; At this point we add the FROM source objects to the list of available source objects.
   colAvailableSourceObjects.Add colSourceObjects.Item(0)

   &#39; Loop over all remaining source objects to check it&#39;s join conditions (we take count - 1 since the index is starting at 0).
   Dim intSourceObjectCount : intSourceObjectCount = colSourceObjects.Count - 1
   &#39; We start at index 1, since the FROM source object is at index 0. We don&#39;t need to check the FROM source object, since it has no join conditions.
   Dim intCurrentSourceObjectIndex
   For intCurrentSourceObjectIndex = 1 To intSourceObjectCount
      &#39; Store a reference to the current source object,
      Dim objCurrentSourceObject : Set objCurrentSourceObject = colSourceObjects.Item(intCurrentSourceObjectIndex)
      &#39; Check whether the source objects references objects which are not available in the current context (using seperate function).
      Dim boolSourceObjectHasInvalidReference : boolSourceObjectHasInvalidReference = SourceObjectHasInvalidReference(objCurrentSourceObject, colAvailableSourceObjects)
      
      &#39; If the current source object references source objects which are not available.
      If boolSourceObjectHasInvalidReference = True Then
         &#39; And we are checking, fail the check.
         If boolAutoFix = False Then
            CheckSourceObjects = False
            Exit Function

         &#39; If we are fixing, try to fix the issue.
         Else
            &#39; Now we loop trough the remaining source object (current index = 1), searching for a source object which we can trade places with.
            &#39; This means finding a source object where the join condition parent object(s) are all listed above the current source object.
            &#39; When we find such a source object we can stop looping and try the current source object again (since it will be checked again later, since it&#39;s position is moved).
            &#39; Store wether we have moved anything in the loop below.
            Dim boolMovedSomething : boolMovedSomething = False
            Dim intNextSourceObjectIndex
            For intNextSourceObjectIndex = intCurrentSourceObjectIndex + 1 To intSourceObjectCount
               &#39; Store reference to next source object.
               Dim objNextSourceObject : Set objNextSourceObject = colSourceObjects.Item(intNextSourceObjectIndex)
            
               &#39; Check whether the next source objects references objects which are not available in the current context (using separate function).
               Dim boolNextSourceObjectHasInvalidReference : boolNextSourceObjectHasInvalidReference = SourceObjectHasInvalidReference(objNextSourceObject, colAvailableSourceObjects)
            
               &#39; If the next source object has no invalid references, we can move the next source object to the current index (so the current and next source object swap places).
               If boolNextSourceObjectHasInvalidReference = False Then
                  colSourceObjects.Move intCurrentSourceObjectIndex, intNextSourceObjectIndex
                  &#39; Add the new current (next) source object to the list of available source objects. 
                  colAvailableSourceObjects.Add objNextSourceObject
                  &#39; Indicate we moved something.
                  boolMovedSomething = True
                  &#39; Since we found a valid source object for the current index, we stop searching and exit the nexted for loop.
                  Exit For
               End if
            Next
         
            &#39; If no valid source object was found for the current index, either the referenced parent side is broken or there is a circular dependency in the mapping.
            If boolMovedSomething = False Then
               CheckSourceObjects = False
               WriteError &quot;Cannot fix the source object order for source object &#39;&quot; &amp; objCurrentSourceObject.DisplayName &amp; &quot;&#39; in mapping &#39;&quot; &amp; objMapping.DisplayName &amp; &quot;&#39;. There is probably a circular dependency.&quot;
               Exit Function
            End If
         End If
      End If
      
      &#39; Add the current source object to the list of available source objects. 
      colAvailableSourceObjects.Add objCurrentSourceObject
   Next
End Function

&#39; Function to check whether a source object is only referencing other source objects which are available.
Function SourceObjectHasInvalidReference(ByRef objSourceObject, ByRef colAvailableSourceObjects)
   &#39; Initialize the reulst with false.
   SourceObjectHasInvalidReference = False
   
   &#39; Loop over the sourcebject join conditions and check the referenced objects in the join conditions against the available source objects (uptill now).
   Dim objJoinCondition
   For Each objJoinCondition in objSourceObject.GetExtendedCollection(&quot;mdde_JoinConditions&quot;)
      &#39; Store a reference to the references source object.
      Dim objParentSourceObject : Set objParentSourceObject = objJoinCondition.GetExtendedAttribute(&quot;mdde_ParentSourceObject&quot;)
      If objParentSourceObject is Nothing Then
         Exit Function
      End If
      
      &#39; Check if parent attribute is a literal value if False it continues 
      Dim parentIsLiteralValue : parentIsLiteralValue = objJoinCondition.GetExtendedAttribute(&quot;mdde_ParentIsLiteralValue&quot;)
      If parentIsLiteralValue = False Then 
      
         &#39; Store a reference to the references source object.
         If Not(colAvailableSourceObjects.Contains(objParentSourceObject)) Then
            WriteError(&quot;The source object &#39;&quot; &amp; objSourceObject.DisplayName &amp; &quot;&#39; in mapping &#39;&quot; &amp; objSourceObject.ParentObject.DisplayName &amp; &quot;&#39; is referencing a source object &#39;&quot; &amp; objParentSourceObject.DisplayName &amp; &quot;&#39; which is not above the current one.&quot;)
            SourceObjectHasInvalidReference = True
            Exit Function
         End If
      End If
   Next
End Function
</a:CheckScript>
<a:AutoFixScrpt>Function %Fix%(obj, outmsg)
   &#39; Use the shared function to fix the problem.
   Dim boolAutoFixed : boolAutoFixed = CheckSourceObjects(obj, True)
   If boolAutoFixed = True Then
      outmsg = &quot;Succesfully corrected order of source objects in mapping &#39;&quot; &amp; obj.DisplayName &amp; &quot;&#39;.&quot;
   End If
   %Fix% = boolAutoFixed
End Function</a:AutoFixScrpt>
<a:EnableAutoFix>1</a:EnableAutoFix>
</o:CustomCheckTargetItem>