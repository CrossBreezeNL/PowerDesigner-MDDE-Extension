<o:MethodTargetItem Id="A2DF8843-2E87-46FC-9263-927B3E02D9E8">
<a:ObjectID>A2DF8843-2E87-46FC-9263-927B3E02D9E8</a:ObjectID>
<a:Name>mdde_InitializeExportExtension</a:Name>
<a:CreationDate>1701423896</a:CreationDate>
<a:Creator>WillemOtten</a:Creator>
<a:Comment>This method is included in the extension to load the contents of templates that are defined in the optionally attached export extension.
Since it is not possible to directly access the GTL templates in another extension via GTL, the contents of these templates is loaded in local extended attributes so it can be included in the XML export</a:Comment>
<a:TargetCategory.Type>1</a:TargetCategory.Type>
<a:MethodScript>Sub %Method%(obj)
   WriteDebug &quot;MDDE LDM Export extension initializion started&quot;
   
   Dim errorsFound: errorsFound = False   
   Dim templateAppliedWithoutErrors: templateAppliedWithoutErrors = False
   Dim childPackagesProcessedWithoutErrors: childPackagesProcessedWithoutErrors = False
 
   &#39;Set the mddex contents attribute on model
   templateAppliedWithoutErrors = applyTemplateOnObject (obj, obj, &quot;mddex_Model_Export_Template&quot;, &quot;mddex_Model_Export_Content&quot;)
   If templateAppliedWithoutErrors = False Then
      errorsFound = True
   End If
   
   templateAppliedWithoutErrors = applyTemplateOnObject (obj, obj, cMDDE_NAMEDOBJECT_ATTRIBUTE_EXPORT_TEMPLATE_NAME, cMDDE_NAMEDOBJECT_ATTRIBUTE_EXPORT_ATTRIBUTE_NAME)
   If templateAppliedWithoutErrors = False Then
      errorsFound = True
   End If
   
   &#39;Process all child objects recursively in all packages
   childPackagesProcessedWithoutErrors = processPackage (obj, obj)
   If childPackagesProcessedWithoutErrors = False Then
      errorsFound = True
   End If
   
   WriteDebug &quot;MDDE LDM Export extension initializion finished&quot;
   
   &#39;Set initialization indicator to true
   If errorsFound = True Then
      obj.SetExtendedAttribute cMDDE_EXPORT_EXTENSION_INITIALIZATION_INDICATOR, False
      Msgbox &quot;There where errors processing the MDDE LDM Export extension, consult the script output window for more information.&quot;
   Else
      obj.SetExtendedAttribute cMDDE_EXPORT_EXTENSION_INITIALIZATION_INDICATOR, True
   End If
End Sub

&#39; Check if the GTL output contains errors
Function GTLOutputHasErrors(GTLResult)
   GTLOutputHasErrors = False
   If InStr(GTLResult, cMDDE_EXPORT_EXTENSION_CODE &amp; &quot;::Profile&quot;) Then
      GTLOutputHasErrors = True
   End If
End Function

Function processPackage(objModel, objPackage)

   Dim collectionProcessedWithoutErrors, childPackagesProcessedWithoutErrors
   processPackage = True
   collectionProcessedWithoutErrors = False
   childPackagesProcessedWithoutErrors = False
   
   &#39;Loop over Entities   
   collectionProcessedWithoutErrors = applyTemplateOnCollection(objModel, objPackage.Entities, &quot;mddex_Entity_Export_Template&quot;, &quot;mddex_Entity_Export_Content&quot;, True)
   If collectionProcessedWithoutErrors = False Then
      processPackage = False
   End If
   
   &#39;Loop over Entity Attributes
   collectionProcessedWithoutErrors = applyTemplateOnCollection(objModel, objPackage.EntityAttributes, &quot;mddex_EntityAttribute_Export_Template&quot;, &quot;mddex_EntityAttribute_Export_Content&quot;, True)
   If collectionProcessedWithoutErrors = False Then
      processPackage = False
   End If
      
   &#39;Loop over Mappings
   collectionProcessedWithoutErrors = applyTemplateOnCollection(objModel, objPackage.Mappings, &quot;mddex_BaseClassifierMapping_Export_Template&quot;, &quot;mddex_BaseClassifierMapping_Export_Content&quot;, True)
   If collectionProcessedWithoutErrors = False Then
      processPackage = False
   End If
      
   &#39;Loop over AttributeMappings
   collectionProcessedWithoutErrors = applyTemplateOnCollection(objModel, objPackage.ModelEntityAttributeMappings, &quot;mddex_BaseStructuralFeatureMapping_Export_Template&quot;, &quot;mddex_BaseStructuralFeatureMapping_Export_Content&quot;, False)
   If collectionProcessedWithoutErrors = False Then
      processPackage = False
   End If
   
   &#39;Loop over SourceObjects within Mappings
   collectionProcessedWithoutErrors = applyTemplateOnExtendedCollection(objModel, objPackage.Mappings, &quot;mdde_SourceObjects&quot;, &quot;mddex_ExtendedSubObject_SourceObject_Export_Template&quot;, &quot;mddex_ExtendedSubObject_SourceObject_Export_Content&quot;, True)
   If collectionProcessedWithoutErrors = False Then
      processPackage = False
   End If
   
   &#39;Loop over packages
   Dim childPackage
   For Each childPackage in objPackage.Packages
      childPackagesProcessedWithoutErrors = processPackage (objModel, childPackage)
      If childPackagesProcessedWithoutErrors = False Then
         processPackage = False
      End If
   Next
   
End Function

&#39;Apply template on object and check for translation errors
Function applyTemplateOnObject(objModel, objItem, templateName, extendedAttributeName)
   &#39;WriteDebug(&quot;Applying template &#39;&quot; &amp; templateName &amp; &quot;&#39; on object &#39;&quot; &amp; objItem.DisplayName &amp; &quot;&#39;&quot;)
   &#39; Initialize return value to True.
   applyTemplateOnObject = True
   
   &#39; Process the object specific template
   Dim evaluatedTemplate: evaluatedTemplate = objItem.EvaluateTemplateFor(templateName, cMDDE_EXPORT_EXTENSION_CODE)
   
   &#39; Clear the extended attribute if it is set
   If objItem.GetExtendedAttributeText(extendedAttributeName) &lt;&gt; &quot;&quot; Then
      objItem.SetExtendedAttribute extendedAttributeName, Empty
   End If

   &#39; Check whether the    
   If GTLOutputHasErrors(evaluatedTemplate) Then
      WriteError (&quot;Error parsing template &quot; &amp; templateName &amp; &quot; for &quot; &amp; objItem.DisplayName)
      &#39; Set success indicator to false and exit function (so we don&#39;t continue).
      applyTemplateOnObject = False
      Exit Function
   End If
   
   &#39; Set the extended attribute if the template evaluation gave a non-empty result.
   If Not evaluatedTemplate = Empty And Not evaluatedTemplate = &quot;&quot; Then
      objItem.SetExtendedAttributeText extendedAttributeName, evaluatedTemplate
   End If   
   
End Function

&#39; Apply template on collection and check for translation errors.
Function applyTemplateOnCollection(objModel, objCollection, templateName, extendedAttributeName, applyNamedObjectTemplate)
   &#39; Initialize return value to True.
   applyTemplateOnCollection = True
   
   &#39; Create variables to be used inside the for loop, for tracking status.
   Dim metaClassTemplateAppliedWithoutErrors
   Dim namedObjectTemplateAppliedWithoutErrors
   
   &#39; Loop over collection and set the extended attribute based on the export template
   Dim obj
   For Each obj in objCollection
      &#39; Intitialize status variables to True.
      metaClassTemplateAppliedWithoutErrors = True
      namedObjectTemplateAppliedWithoutErrors = True

      &#39; Skip shortcuts.
      If Not obj.IsShortCut Then
         metaClassTemplateAppliedWithoutErrors = applyTemplateOnObject (objModel, obj, templateName, extendedAttributeName)
         &#39; If specified, also apply the namedobject template for adding custom attributes to the element
         If applyNamedObjectTemplate Then
            namedObjectTemplateAppliedWithoutErrors = applyTemplateOnObject (objModel, obj, cMDDE_NAMEDOBJECT_ATTRIBUTE_EXPORT_TEMPLATE_NAME, cMDDE_NAMEDOBJECT_ATTRIBUTE_EXPORT_ATTRIBUTE_NAME)
         End If
         &#39; If one of the previous operations failed, return False.
         If metaClassTemplateAppliedWithoutErrors = False Or namedObjectTemplateAppliedWithoutErrors = False Then
            &#39; Update return value to False.
            applyTemplateOnCollection = False
            &#39; If it failed we stop.         
            Exit Function
         End If
      End If   
   Next
End Function

&#39; Apply template on a collection containing objects with an extended collection (colWithObjectsWithExtCol)
Function applyTemplateOnExtendedCollection(objModel, colWithObjectsWithExtCol, strExtColName, templateName, extendedAttributeName, applyNamedObjectTemplate)
   Dim objCurrentObjectWithExtCol, colExtCol
   &#39; Initialize the return value with True.
   applyTemplateOnExtendedCollection = True
   &#39; Loop through the objects which have the extended collection.
   For Each objCurrentObjectWithExtCol In colWithObjectsWithExtCol
      WriteDebug(&quot;Searching for extended collection items &#39;&quot; &amp; strExtColName &amp; &quot;&#39; on object &#39;&quot; &amp; objCurrentObjectWithExtCol.DisplayName &amp; &quot;&#39;.&quot;)
      &#39; Get the extended collection.
      Set colExtCol = objCurrentObjectWithExtCol.GetExtendedCollection(strExtColName)
      &#39; Only proceed if there is an extended collection with the given name.
      If Not(colExtCol Is Nothing) Then
         WriteDebug(&quot;Found &quot; &amp; colExtCol.Count &amp; &quot; &#39;&quot; &amp; strExtColName &amp; &quot;&#39; extended collection items&quot;)
         &#39; Apply the template on the extende collection and store the return value in the current function return value.
         applyTemplateOnExtendedCollection = applyTemplateOnCollection(objModel, colExtCol, templateName, extendedAttributeName, applyNamedObjectTemplate)
         &#39; If something whent wrong uptill now we stop.
         If applyTemplateOnExtendedCollection = False Then
            Exit Function
         End If  
      End If
   Next
End Function </a:MethodScript>
</o:MethodTargetItem>