<a:CheckGlobalScript>&#39;******************************************************************************
&#39;* Purpose:  This VB-Script holds global definitions shared by all the custom-
&#39;*            checks scripts of the model extension.
&#39;******************************************************************************

Option Explicit &#39; This is to ensure all used variables are defined

Const cMDDE_PRJ_EXT_CODE = &quot;MDDE_PRJ&quot;
Const cMDDE_LDM_EXT_CODE = &quot;MDDE_LDM&quot;

&#39;******************************************************************************
&#39; Routine to write an error to the output.
&#39;******************************************************************************
Sub WriteError (strMsg)
   Output now() &amp; vbtab &amp; &quot; ERROR: &quot; &amp; strMsg
End Sub


&#39;******************************************************************************
&#39; Routine to write an debug message to the output.
&#39;******************************************************************************
Sub WriteInfo (strMsg)
   Output now() &amp; vbtab &amp; &quot; INFO: &quot; &amp; strMsg
End Sub


&#39;******************************************************************************
&#39; Routine to write an debug message to the output.
&#39; To enable or disable debug mode:
&#39; &gt; In Tools -&gt; General Options -&gt; Variables
&#39; &gt; Create an environment variable named MDDE_DEBUG_MODE with the value True or False.
&#39;******************************************************************************
Sub WriteDebug (strMsg)
   &#39;Initialize the debug mode to be disabled.
   Dim bDebugMode : bDebugMode = False
   
   &#39; Check whether debug mode is configured.
   If Not(ActiveModel Is Nothing) Then
      &#39; If the MDDE_DEBUG_MODE variable is configured, use it.
      If Len(ActiveModel.EvaluateText(&quot;%$MDDE_DEBUG_MODE%&quot;)) &gt; 0 Then
         bDebugMode = CBool(ActiveModel.EvaluateText(&quot;%$MDDE_DEBUG_MODE%&quot;))
      End If
   End If
   
   &#39; Write the output if debug mode is enabled.
   If (bDebugMode) Then
      Output now() &amp; vbtab &amp; &quot; DEBUG: &quot; &amp; strMsg
   End If
End Sub

Sub DecomposeModel(strDisplayName, strFileUrl)
   &#39; Log that we will start decomposing.
   WriteInfo &quot;Start decomposing &quot; &amp; strDisplayName

   &#39; Resolve the decompose.ps1 script location.
   Dim strDecomposeScriptLocation : strDecomposeScriptLocation = EvaluateNamedPath(&quot;%PDC_SCRIPT_PATH%/decompose.ps1&quot;)
   &#39; For some reason the colon in the file URL is a pipe. So we replace the pipe with colon so the resulting path is correct.
   Dim strFileLocation : strFileLocation = Replace(Replace(Replace(strFileUrl, &quot;file:///&quot;, &quot;&quot;), &quot;/&quot;, &quot;\&quot;), &quot;|&quot;, &quot;:&quot;)
   Dim strDecomposeCommand : strDecomposeCommand = &quot; -File &quot;&quot;&quot; &amp; strDecomposeScriptLocation &amp; &quot;&quot;&quot; &quot;&quot;&quot; &amp; strFileLocation &amp; &quot;&quot;&quot;&quot;
   &#39; Execute the PowerShell command and pipe the output to the script output.
   Dim strCommandResults : strCommandResults = ExecuteCommand(&quot;pwsh.exe&quot;, strDecomposeCommand, cmd_PipeOutput)

   &#39; Log that we are done.
   WriteInfo &quot;Done decomposing &quot; &amp; strDisplayName
End Sub</a:CheckGlobalScript>